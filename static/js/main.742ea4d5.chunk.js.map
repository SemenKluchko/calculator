{"version":3,"sources":["App.js","index.js"],"names":["App","useState","calc","setCalc","ops","checkingOps","includes","slice","updateCalc","value","calculate","eval","toString","clearCalc","createDigits","digits","i","push","onClick","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"itBAGA,SAASA,MACP,cAAwBC,oDAAS,IAAjC,8LAAOC,KAAP,cAAaC,QAAb,cACEC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAEvBC,YAAc,YAEdD,IAAIE,SAASJ,OAASE,IAAIE,SAASJ,KAAKK,OAAO,KAG/CC,WAAa,SAAAC,GACjBJ,cACAF,QAAQD,KAAOO,IAIXC,UAAY,SAAZA,YACJL,cACA,IACEF,QAAQQ,KAAKT,MAAMU,YAErB,eACET,QAAQ,MAINU,UAAY,WACZX,MACFC,QAAQ,KAQNW,aAAe,WAGnB,IAFA,IAAMC,EAAS,GADU,WAGhBC,GACPD,EAAOE,KACL,qEACEC,QAAS,kBAAMV,WAAWQ,EAAEJ,aAD9B,SAGGI,GADIA,KAJFA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAUT,OAAOD,GAIT,OACE,kEAAKI,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,kEAAKA,UAAU,UAAf,SACGjB,MAAQ,MAGX,mEAAKiB,UAAU,YAAf,UACE,qEAAQD,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASL,UAAjB,kBAIF,mEAAKM,UAAU,SAAf,UACGL,eACD,qEAAQI,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAASR,UAAjB,uBASKV,2B,+BCrFf,iEAMAoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.742ea4d5.chunk.js","sourcesContent":["import { useState } from 'react';\n\n\nfunction App() {\n  const [calc, setCalc] = useState(''),\n    ops = ['/', '*', '+', '-', '.'];\n\n  const checkingOps = () => {\n    // if the value we've typed is an operator and the last value we've typed was an operator \n    if (ops.includes(calc) && ops.includes(calc.slice(-1))) return;\n  }\n\n  const updateCalc = value => {\n    checkingOps();\n    setCalc(calc + value);\n  }\n\n  // calculating the values by clicking the equal sign\n  const calculate = () => {\n    checkingOps();\n    try {\n      setCalc(eval(calc).toString());\n    }\n    catch {\n      setCalc('');\n    }\n  }\n\n  const clearCalc = () => {\n    if (calc) {\n      setCalc('');\n    } else {\n      return;\n    }\n  }\n\n  /* here I've created function that create buttons from 1 to 9,\n   instead of typing them manually */\n  const createDigits = () => {\n    const digits = [];\n\n    for (let i = 1; i < 10; i++) {\n      digits.push(\n        <button\n          onClick={() => updateCalc(i.toString())}\n          key={i}>\n          {i}\n        </button>\n      )\n    }\n\n    return digits;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"display\">\n          {calc || '0'}\n        </div>\n\n        <div className=\"operators\">\n          <button onClick={() => updateCalc('/')}>/</button>\n          <button onClick={() => updateCalc('*')}>*</button>\n          <button onClick={() => updateCalc('+')}>+</button>\n          <button onClick={() => updateCalc('-')}>-</button>\n\n          <button onClick={clearCalc}>C</button>\n        </div>\n\n\n        <div className=\"digits\">\n          {createDigits()}\n          <button onClick={() => updateCalc('0')}>0</button>\n          <button onClick={() => updateCalc('.')}>.</button>\n          <button onClick={calculate}>=</button>\n        </div>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}